name: Build VTK from source

on:
  workflow_dispatch

env:
  PYTHONUTF8: 1
  VTK_VERSION: 9.2.6
  VTK_MINOR_VERSION: 9.2

jobs:
  build:
    name: Build with wrapper for Python ${{ matrix.python-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        # os: ['ubuntu-20.04', 'macos-13', 'macos-14', 'windows-2019']
        # python-version: ['3.10', '3.11', '3.12']
        os: ['macos-13', 'macos-14']
        python-version: ['3.11']
        include:
          - os: 'macos-13'
            arch: 'x86_64'
            python_arch: 'x64'
            target: 'x86_64-apple-macos'
          - os: 'macos-14'
            arch: 'arm64'
            python_arch: 'arm64'
            target: 'arm64-apple-macos'

    steps:

      - uses: actions/checkout@v4

      - name: Install Python on other platforms than MacOS
        uses: actions/setup-python@v5
        if: ${{ runner.os != 'macOS' }}
        with:
          python-version: ${{ matrix.python-version }}
          architecture: ${{ matrix.python_arch }}
                    
      # We need an arm64 only Python for macos-14 and an x86_64 only Python for macos-13. 
      # The actions/setup-python Python is universal2
      - name: Install Python on MacOS
        if: ${{ runner.os == 'macOS' }}
        run: |        
          # Uninstall any existing Python to avoid conflicts
          brew uninstall --ignore-dependencies python@3.11 || true
          
          # Install Python with native arm64 or architecture
          arch -${{ matrix.arch }} brew install --force --overwrite python@${{ matrix.python-version }}
          
          # Note: Unversioned and major-versioned symlinks `python`, `python3`, `python-config`, `python3-config`, `pip`, `pip3`, etc. 
          # pointing to `python3.11`, `python3.11-config`, `pip3.11` etc., respectively, are installed into
          # /opt/homebrew/opt/python@3.11/libexec/bin (arm64) or /usr/local/opt/python@3.11/libexec/bin (x86_64)
          PYTHON_ROOT=$(brew --prefix python@${{ matrix.python-version }})          
          
          # Save paths for later steps
          PATH="$PYTHON_ROOT/libexec/bin:$PATH"          
          echo "PATH=$PATH" >> $GITHUB_ENV
          
          # ensure cmake takes the right Python on macos-13 and macsos-14 and deployment target 11.0
          echo "PYTHON_ROOT=$PYTHON_ROOT" >> $GITHUB_ENV
          echo "Python3_ROOT=$PYTHON_ROOT" >> $GITHUB_ENV
          echo "Python_ROOT=$PYTHON_ROOT" >> $GITHUB_ENV
          echo "MACOSX_DEPLOYMENT_TARGET=11.0" >> $GITHUB_ENV
          echo "_PYTHON_HOST_PLATFORM=macosx-11.0-${{ matrix.arch }}" >> $GITHUB_ENV

      - name: Verify Python
        run: |
          command -v python
          python --version
          python -c "import platform; print(f'Architecture: {platform.machine()}')"
          file $(which python)
      
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install --upgrade wheel build setuptools
          python -m pip freeze

      - name: Ubuntu Deps
        if: matrix.os == 'ubuntu-20.04'
        run: |
          sudo apt install -y build-essential cmake mesa-common-dev mesa-utils freeglut3-dev python-dev python-venv git-core ninja-build cmake wget libglvnd0 libglvnd-dev

      - name: MacOS Deps
        if: startsWith(matrix.os, 'macos')
        run: |
          brew install ninja

      - name: Restore cached build files
        id: cache-build
        uses: actions/cache/restore@v4
        with:
          path: |
            ./vtk/VTK-${{ env.VTK_VERSION }}
            ./vtk/build
            ./vtk/build/.ninja_log
          key:  ${{ matrix.os }}-${{ matrix.python-version }}-ninja-${{ env.VTK_VERSION }}-

      - name: Download vtk
        run: |
          mkdir -p ./vtk/build
          wget -q https://www.vtk.org/files/release/${{ env.VTK_MINOR_VERSION}}/VTK-${{ env.VTK_VERSION }}.tar.gz  # Update this for newer releases of VTK
          tar -zxf VTK-${{ env.VTK_VERSION }}.tar.gz --directory ./vtk/
      
      - name: Verify Python lib path is correct for building VTK
        run: |
          echo "MACOSX_DEPLOYMENT_TARGET: $MACOSX_DEPLOYMENT_TARGET"
          echo "_PYTHON_HOST_PLATFORM: $_PYTHON_HOST_PLATFORM"

          cd ./vtk/VTK-${{ env.VTK_VERSION }}
          python CMake/wheel_extract_platlib.py
          # Note: This is how VTK builds library deployment paths
          # the python/action based universal Python uses "universal2"
          # On macos-14 with arm64 brew Python it uses "arm64" based paths
          # On macos-13 with x86_x64 brew Python it uses "x86_x64" based paths
          python CMake/wheel_extract_platlib.py
          cd ..

      - name: Compile from Scratch for Macos
        if: steps.cache-build.outputs.cache-hit != 'true' && startsWith(matrix.os, 'macos')
        run: |
          echo "== Environment =="
          echo "MACOSX_DEPLOYMENT_TARGET: $MACOSX_DEPLOYMENT_TARGET"
          echo "_PYTHON_HOST_PLATFORM: $_PYTHON_HOST_PLATFORM"

          cd ./vtk/build

          echo "== FLAGS =="
          flags="-Wno-error=incompatible-function-pointer-types -target ${{ matrix.target }} -mmacos-version-min=11.0"
          export CFLAGS="$flags"
          export CXXFLAGS="$flags"
          export LDFLAGS="-mmacos-version-min=11.0"        
          echo "CFLAGS=$CFLAGS"
          echo "CXXFLAGS=$CXXFLAGS"
          echo "LDFLAGS=$LDFLAGS"

          cmake -GNinja \
                -DVTK_WHEEL_BUILD=ON \
                -DVTK_WRAP_PYTHON=ON \
                -DVTK_DIST_NAME_SUFFIX=cadquery \
                -DVTK_VERSION_SUFFIX="" \
                -DCMAKE_C_FLAGS="$CFLAGS" \
                -DCMAKE_CXX_FLAGS="$CXXFLAGS" \
                -DCMAKE_SHARED_LINKER_FLAGS="$LDFLAGS" \
                -DCMAKE_EXE_LINKER_FLAGS="$LDFLAGS" \
                -DCMAKE_MODULE_LINKER_FLAGS="$LDFLAGS" \
                -DCMAKE_OSX_ARCHITECTURES=${{ matrix.arch }} \
                -DCMAKE_SYSTEM_PROCESSOR=${{ matrix.arch }} \
                -DCMAKE_HOST_SYSTEM_PROCESSOR=${{ matrix.arch }} \
                -DCMAKE_OSX_DEPLOYMENT_TARGET=11.0 \
                -DCMAKE_BUILD_TYPE=Release \
                ../VTK-${{ env.VTK_VERSION }}

          ninja -j3

      - name: Cache build folder
        id: cache-cpp
        uses: actions/cache/save@v4
        with:
          path: |
            ./vtk/VTK-${{ env.VTK_VERSION }}
            ./vtk/build
            ./vtk/build/.ninja_log
          key: ${{ steps.cache-build.outputs.cache-primary-key }}
            
      - name: Verify Library Architecture
        run: |
          find . -name "*.dylib" -exec lipo -archs {} \; | uniq
          find . -name "*.dylib" -exec bash -c 'otool -l {} | grep minos' \; | uniq

      - name: Build wheel
        run: |
          command -v python
          cd ./vtk/build
          sed -i 's/dist_name = '\''vtk'\''/dist_name = '\''cadquery_vtk'\''/' setup.py
          python -m build -n -w
          cd ../../
          find ./ -iname *.whl

      - name: Test wheel
        run: |
          python -V
          pip install vtk/build/dist/*.whl
          python -c "import vtk;print('vtk imported successfully')"

      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: cadquery-vtk-${{ matrix.os }}-cp${{ matrix.python-version }}
          path: vtk/build/dist/*.whl
#
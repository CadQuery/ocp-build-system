name: Build VTK from source

on:
  workflow_dispatch

env:
  PYTHONUTF8: 1

jobs:
  build:
    name: Build with wrapper for Python ${{ matrix.python-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        # os: ['ubuntu-20.04', 'macos-13', 'macos-14', 'windows-2019']
        # python-version: ['3.10', '3.11', '3.12']
        os: ['macos-14']
        python-version: ['3.11']
        include:
          # - os: 'macos-13'
          #   arch: x86_64
          #   target: x86_64-apple-macos11
          - os: 'macos-14'
            arch: arm64
            target: arm64-apple-macos11

    steps:

      - uses: actions/checkout@v4

      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          architecture: ${{ matrix.arch == 'x86_64' && 'x64' || 'arm64' }}
                    
      - name: Ubuntu Deps
        if: matrix.os == 'ubuntu-20.04'
        shell: bash -l {0}
        run: |
          sudo apt install -y build-essential cmake mesa-common-dev mesa-utils freeglut3-dev python-dev python-venv git-core ninja-build cmake wget libglvnd0 libglvnd-dev

      - name: MacOS Deps
        if: startsWith(matrix.os, 'macos')
        shell: bash -l {0}
        run: |
          brew install ninja

      - name: Setup Python Env
        shell: bash -l {0}
        run: |
          python -m pip install --upgrade pip
          python -m pip install --upgrade wheel build setuptools
          python -m pip freeze 

      - name: Download vtk
        run: |
          mkdir -p ./vtk/build
          wget https://www.vtk.org/files/release/9.2/VTK-9.2.6.tar.gz  # Update this for newer releases of VTK
          tar -zxf VTK-9.2.6.tar.gz --directory ./vtk/

      - name: Cache build folder
        id: cache-cpp
        uses: actions/cache@v3
        with:
          path: |
            build
            .ninja_log
          key: ${{ matrix.os }}-ninja-${{ hashFiles('**/*.ninja') }}
          restore-keys: |
            ${{ matrix.os }}-ninja-

      - name: Compile from Scratch
        if: steps.cache-cpp.outputs.cache-hit != 'true' && startsWith(matrix.os, 'macos')  
        shell: bash -l {0}
        # env:
        #   # Explicitly set ARM64 architecture
        #   CFLAGS: "-target ${{ matrix.target }}"
        #   CXXFLAGS: "-target ${{ matrix.target }}"  
        #   MACOSX_DEPLOYMENT_TARGET: "11.0"
        run: |
          echo "arch=${{ matrix.arch }}"
          echo "target=${{ matrix.target }}"        
          cd ./vtk/build
          cmake -GNinja -DVTK_WHEEL_BUILD=ON -DVTK_WRAP_PYTHON=ON \
                -DCMAKE_C_FLAGS="-Wno-error=incompatible-function-pointer-types" \
                -DCMAKE_BUILD_TYPE=Release -DVTK_VERSION_SUFFIX="" \
                -DVTK_DIST_NAME_SUFFIX=cadquery \
                -DCMAKE_OSX_ARCHITECTURES=${{ matrix.arch }} \
                -DCMAKE_SYSTEM_PROCESSOR=${{ matrix.arch }} \
                -DCMAKE_HOST_SYSTEM_PROCESSOR=${{ matrix.arch }} \
                -DCMAKE_CXX_FLAGS="-target ${{ matrix.target }}" \
                -DCMAKE_OSX_DEPLOYMENT_TARGET=11.0 \
                -DCMAKE_BUILD_TYPE=Release \
                ../VTK-9.2.6
          ninja -j3 -v

      - name: Verify Library Architecture
        run: |
          find . -name "*.dylib" -exec lipo -info {} \;

      - name: Build wheel
        shell: bash -l {0}
        run: |
          cd ./vtk/build
          python -m build -n -w
          cd ../../
          find ./ -iname *.whl

      - name: Test wheel
        shell: bash -l {0}
        run: |
          python -V
          pip install vtk/build/dist/*.whl
          python -c "import vtk;print('vtk imported successfully')"

      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: cadquery-vtk-${{ matrix.os }}-cp${{ matrix.python-version }}
          path: vtk/build/dist/*.whl

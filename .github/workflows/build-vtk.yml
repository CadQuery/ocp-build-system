name: Build VTK from source

on:
  workflow_dispatch

env:
  PYTHONUTF8: 1
  VTK_VERSION: 9.2.6
  VTK_MINOR_VERSION: 9.2

jobs:
  build:
    name: Build with wrapper for Python ${{ matrix.python-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: ['ubuntu-20.04', 'macos-13', 'macos-14', 'windows-2019']
        # python-version: ['3.10', '3.11', '3.12']
        python-version: ['3.11']
        include:
          - os: 'macos-13'
            arch: 'x86_64'
            python_arch: 'x64'
            target: 'x86_64-apple-macos'
          - os: 'macos-14'
            arch: 'arm64'
            python_arch: 'arm64'
            target: 'arm64-apple-macos'

    steps:

      - uses: actions/checkout@v4

      # = = = = = = = = = = = = = = = = = = 
      # STEP 1: Install Python
      # = = = = = = = = = = = = = = = = = = 

      - name: Install Python on Linux and Windows
        if: ${{ runner.os != 'macOS' }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          architecture: ${{ matrix.python_arch }}
                    
      # We need an arm64 only Python for macos-14 and an x86_64 only Python for macos-13. 
      # The actions/setup-python Python is universal2
      - name: Install Python on MacOS
        if: ${{ runner.os == 'macOS' }}
        run: |        
          # Uninstall any existing Python to avoid conflicts
          brew uninstall --ignore-dependencies python@3.11 || true
          
          # Install Python with native arm64 or architecture
          arch -${{ matrix.arch }} brew install --force --overwrite python@${{ matrix.python-version }}
          
          # Note: Unversioned and major-versioned symlinks `python`, `python3`, `python-config`, `python3-config`, `pip`, `pip3`, etc. 
          # pointing to `python3.11`, `python3.11-config`, `pip3.11` etc., respectively, are installed into
          # /opt/homebrew/opt/python@3.11/libexec/bin (arm64) or /usr/local/opt/python@3.11/libexec/bin (x86_64)
          PYTHON_ROOT=$(brew --prefix python@${{ matrix.python-version }})          
          
          # Save paths for later steps
          PATH="$PYTHON_ROOT/libexec/bin:$PATH"          
          echo "PATH=$PATH" >> $GITHUB_ENV
          
          # ensure cmake takes the right Python on macos-13 and macsos-14 and deployment target 11.0
          echo "PYTHON_ROOT=$PYTHON_ROOT" >> $GITHUB_ENV
          echo "Python3_ROOT=$PYTHON_ROOT" >> $GITHUB_ENV
          echo "Python_ROOT=$PYTHON_ROOT" >> $GITHUB_ENV
          echo "MACOSX_DEPLOYMENT_TARGET=11.0" >> $GITHUB_ENV
          echo "_PYTHON_HOST_PLATFORM=macosx-11.0-${{ matrix.arch }}" >> $GITHUB_ENV

      - name: Verify Python on MacOS
        if: ${{ runner.os == 'macOS' }}
        run: |
          command -v python
          python --version
          python -c "import platform; print(f'Architecture: {platform.machine()}')"
      
      # = = = = = = = = = = = = = = = = = = 
      # STEP 2: Install Python dependencies
      # = = = = = = = = = = = = = = = = = = 

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install --upgrade wheel build setuptools
          python -m pip freeze

      # = = = = = = = = = = = = = = = = = = 
      # STEP 3: Install build dependencies
      # = = = = = = = = = = = = = = = = = = 

      - name: Ubuntu Deps
        if: matrix.os == 'ubuntu-20.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential mesa-common-dev mesa-utils freeglut3-dev python-dev git-core ninja-build cmake wget libglvnd0 libglvnd-dev

      - name: MacOS Deps
        if: startsWith(matrix.os, 'macos')
        run: |
          brew install ninja

      - name: Windows Deps (build environment)
        if: ${{ runner.os == 'Windows' }}
        uses: ilammy/msvc-dev-cmd@v1

      # = = = = = = = = = = = = = = = = = = 
      # RESTORE CACHE IF POSSIBLE
      # = = = = = = = = = = = = = = = = = = 

      - name: Restore cached build files
        # works on Windows, since github actions replace the '/' with '\'
        id: cache-build
        uses: actions/cache/restore@v4
        with:
          path: |
            ./vtk/VTK-${{ env.VTK_VERSION }}
            ./vtk/build
            ./vtk/build/.ninja_log
          key:  ${{ matrix.os }}-${{ matrix.python-version }}-ninja-${{ env.VTK_VERSION }}-

      # = = = = = = = = = = = = = = = = = = 
      # STEP 4: Download VTK
      # = = = = = = = = = = = = = = = = = = 

      - name: Download vtk
        if: steps.cache-build.outputs.cache-hit != 'true'
        shell: python
        run: |
          import os
          import tarfile
          import urllib.request
          
          # Create build directory
          os.makedirs('./vtk/build', exist_ok=True)
          
          # Download the file
          vtk_url = f"https://www.vtk.org/files/release/${{ env.VTK_MINOR_VERSION}}/VTK-${{ env.VTK_VERSION }}.tar.gz"
          urllib.request.urlretrieve(vtk_url, "VTK.tar.gz")
          
          # Extract the archive
          with tarfile.open("VTK.tar.gz", "r:gz") as tar:
              tar.extractall(path="./vtk/")

      # = = = = = = = = = = = = = = = = = = 
      # STEP 5: Verify Python lib path
      # = = = = = = = = = = = = = = = = = = 

      - name: Verify Python lib path is correct for building VTK
        if: steps.cache-build.outputs.cache-hit != 'true'
        shell: python
        run: |
            import os
            import platform
            
            # Change directory in a cross-platform way
            vtk_dir = os.path.join('vtk', f'VTK-${{ env.VTK_VERSION }}')
            os.chdir(vtk_dir)
            
            import subprocess
            script_path = os.path.join('CMake', 'wheel_extract_platlib.py')
            subprocess.run(['python', script_path], check=True)

      # = = = = = = = = = = = = = = = = = = 
      # STEP 6: Compile VTK
      # = = = = = = = = = = = = = = = = = = 

      - name: Compile from Scratch for Macos
        if: steps.cache-build.outputs.cache-hit != 'true' && startsWith(matrix.os, 'macos')
        run: |
          echo "== Environment =="
          echo "MACOSX_DEPLOYMENT_TARGET: $MACOSX_DEPLOYMENT_TARGET"
          echo "_PYTHON_HOST_PLATFORM: $_PYTHON_HOST_PLATFORM"

          cd ./vtk/build

          echo "== FLAGS =="
          flags="-Wno-error=incompatible-function-pointer-types -target ${{ matrix.target }} -mmacos-version-min=11.0"
          export CFLAGS="$flags"
          export CXXFLAGS="$flags"
          export LDFLAGS="-mmacos-version-min=11.0"        
          echo "CFLAGS=$CFLAGS"
          echo "CXXFLAGS=$CXXFLAGS"
          echo "LDFLAGS=$LDFLAGS"

          cmake -GNinja \
                -DVTK_WHEEL_BUILD=ON \
                -DVTK_WRAP_PYTHON=ON \
                -DVTK_VERSION_SUFFIX="" \
                -DCMAKE_C_FLAGS="$CFLAGS" \
                -DCMAKE_CXX_FLAGS="$CXXFLAGS" \
                -DCMAKE_SHARED_LINKER_FLAGS="$LDFLAGS" \
                -DCMAKE_EXE_LINKER_FLAGS="$LDFLAGS" \
                -DCMAKE_MODULE_LINKER_FLAGS="$LDFLAGS" \
                -DCMAKE_OSX_ARCHITECTURES=${{ matrix.arch }} \
                -DCMAKE_SYSTEM_PROCESSOR=${{ matrix.arch }} \
                -DCMAKE_HOST_SYSTEM_PROCESSOR=${{ matrix.arch }} \
                -DCMAKE_OSX_DEPLOYMENT_TARGET=11.0 \
                -DCMAKE_BUILD_TYPE=Release \
                ../VTK-${{ env.VTK_VERSION }}

          ninja -j3

      - name: Compile from Scratch for Linux
        if: steps.cache-build.outputs.cache-hit != 'true' && matrix.os == 'ubuntu-20.04'
        run: |
          cd ./vtk/build
          cmake -GNinja \
                -DVTK_WHEEL_BUILD=ON \
                -DVTK_WRAP_PYTHON=ON \
                -DVTK_VERSION_SUFFIX="" \
                -DCMAKE_BUILD_TYPE=Release \
                ../VTK-${{ env.VTK_VERSION }}

          ninja -j2

      - name: Compile from Scratch for Windows
        if: steps.cache-build.outputs.cache-hit != 'true' && matrix.os == 'windows-2019'
        shell: cmd
        run: |
          cd vtk\build
          cmake -GNinja -DVTK_WHEEL_BUILD=ON -DVTK_WRAP_PYTHON=ON -DVTK_VERSION_SUFFIX="" -DCMAKE_BUILD_TYPE=Release ../VTK-${{ env.VTK_VERSION }}

          ninja -j4

      # = = = = = = = = = = = = = = = = = = 
      # CACHE BUILD FILES IF NEEDED
      # = = = = = = = = = = = = = = = = = = 

      - name: Cache build folder
        # works on Windows, since github actions replace the '/' with '\'
        id: cache-cpp
        uses: actions/cache/save@v4
        with:
          path: |
            ./vtk/VTK-${{ env.VTK_VERSION }}
            ./vtk/build
            ./vtk/build/.ninja_log
          key: ${{ steps.cache-build.outputs.cache-primary-key }}
      
      # = = = = = = = = = = = = = = = = = = 
      # STEP 7: BUILD WHEEL
      # = = = = = = = = = = = = = = = = = = 

      - name: Verify Library Architecture
        if: ${{ runner.os == 'macOS' }}
        run: |
          find . -name "*.dylib" -exec lipo -archs {} \; | uniq
          find . -name "*.dylib" -exec bash -c 'otool -l {} | grep minos' \; | uniq

      - name: Update dist_name in setup.py
        shell: python
        run: |
          with open('./vtk/build/setup.py', 'r') as file:
              content = file.read()
          content = content.replace("dist_name = 'vtk'", "dist_name = 'cadquery_vtk'")
          with open('./vtk/build/setup.py', 'w') as file:
              file.write(content)
              
      - name: Build wheel on Linux and MacOS
        if: matrix.os != 'windows-2019'
        run: |
          command -v python
          cd ./vtk/build
          python -m build -n -w
          cd ../../
          
          pip install vtk/build/dist/*.whl
          python -c "import vtk;print('vtk imported successfully')"

      - name: Build wheel on Windows
        if: matrix.os == 'windows-2019'
        shell: cmd
        run: |
          where python
          cd .\vtk\build
          python -m build -n -w
          cd ..\..\
          dir /s /b *.whl

          for /f "delims=" %%i in ('dir /s /b *.whl') do pip install "%%i"
          python -c "import vtk;print('vtk imported successfully')"

      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: cadquery-vtk-${{ matrix.os }}-cp${{ matrix.python-version }}
          path: vtk/build/dist/*.whl

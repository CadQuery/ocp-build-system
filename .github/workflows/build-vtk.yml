name: Build VTK from source

on:
  workflow_dispatch

env:
  PYTHONUTF8: 1

jobs:
  build:
    name: Build with wrapper for Python ${{ matrix.python-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        # os: ['ubuntu-20.04', 'macos-13', 'macos-14', 'windows-2019']
        # python-version: ['3.10', '3.11', '3.12']
        os: ['macos-13', 'macos-14']
        python-version: ['3.11']
        include:
          - os: 'macos-13'
            arch: 'x86_64'
            python_arch: 'x64'
            target: 'x86_64-apple-macos11'
            brew_path: '/usr/local/opt'
          - os: 'macos-14'
            arch: 'arm64'
            python_arch: 'arm64'
            target: 'arm64-apple-macos11'
            brew_path: '/opt/homebrew/opt'

    steps:

      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        if: ${{ runner.os != 'macOS' }}
        with:
          python-version: ${{ matrix.python-version }}
          architecture: ${{ matrix.python_arch }}
                    
      - name: Install ARM64 Python
        # We need an arm64 or x86_64 only Python for macos. The python-action Python is universal2
        if: ${{ runner.os == 'macOS' }}
        run: |        
          # Uninstall any existing Python to avoid conflicts
          brew uninstall --ignore-dependencies python@3.11 || true
          
          # Install Python with native arm64 or architecture
          arch -${{ matrix.arch }} brew install --force --overwrite python@${{ matrix.python-version }}
          
          # Note: Unversioned and major-versioned symlinks `python`, `python3`, `python-config`, `python3-config`, `pip`, `pip3`, etc. 
          # pointing to `python3.11`, `python3.11-config`, `pip3.11` etc., respectively, are installed into
          # /opt/homebrew/opt/python@3.11/libexec/bin (arm64) or /usr/local/opt/python@3.11/libexec/bin (x86_64)
          PATH="${{ matrix.brew_path }}/python@${{ matrix.python-version }}/libexec/bin:$PATH"          
          echo "PATH=$PATH" >> $GITHUB_ENV

          # ensure cmake takes the right Python
          echo "Python3_ROOT=/opt/homebrew/opt/python@${{ matrix.python-version }}" >> $GITHUB_ENV

      - name: Verify Python
        run: |
          command -v python
          python --version
          python -c "import platform; print(f'Architecture: {platform.machine()}')"
          file $(which python)
      
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install --upgrade wheel build setuptools
          python -m pip freeze

      - name: Ubuntu Deps
        if: matrix.os == 'ubuntu-20.04'
        shell: bash -l {0}
        run: |
          sudo apt install -y build-essential cmake mesa-common-dev mesa-utils freeglut3-dev python-dev python-venv git-core ninja-build cmake wget libglvnd0 libglvnd-dev

      - name: MacOS Deps
        if: startsWith(matrix.os, 'macos')
        shell: bash -l {0}
        run: |
          brew install ninja

      - name: Download vtk
        run: |
          mkdir -p ./vtk/build
          wget https://www.vtk.org/files/release/9.2/VTK-9.2.6.tar.gz  # Update this for newer releases of VTK
          tar -zxf VTK-9.2.6.tar.gz --directory ./vtk/
          
      - name: Verify Python Architecture correct for building VTK
        run: |
          cd ./vtk/VTK-9.2.6
          python CMake/wheel_extract_platlib.py
          # Note: This is how VTK builds library deployment paths
          # On macos-14 python/action based it uses "universal2" and with arm64 brew Python it uses "arm64"
          python CMake/wheel_extract_platlib.py
          cd ..

      - name: Cache build folder
        id: cache-cpp
        uses: actions/cache@v3
        with:
          path: |
            build
            .ninja_log
          key: ${{ matrix.os }}-${{ matrix.python-version }}-ninja-${{ hashFiles('**/CMakeLists.txt', '**/*.cmake') }}
          restore-keys: |
            ${{ matrix.os }}-${{ matrix.python-version }}-ninja-

      - name: Compile from Scratch
        if: startsWith(matrix.os, 'macos') && (steps.cache-cpp.outputs.cache-hit != 'true')
        shell: bash -l {0}
        run: |
          echo "arch=${{ matrix.arch }}"
          echo "target=${{ matrix.target }}"      
          echo "PYTHON_VERSION_NO_DOT=$(echo ${{ matrix.python-version }} | tr -d '.')" >> $GITHUB_ENV
          cd ./vtk/build
          cmake -GNinja \
                -DVTK_WHEEL_BUILD=ON \
                -DVTK_WRAP_PYTHON=ON \
                -DVTK_DIST_NAME_SUFFIX=cadquery \
                -DVTK_VERSION_SUFFIX="" \
                -DCMAKE_C_FLAGS="-target ${{ matrix.target }}" \
                -DCMAKE_CXX_FLAGS="-Wno-error=incompatible-function-pointer-types -target ${{ matrix.target }}" \
                -DCMAKE_OSX_ARCHITECTURES=${{ matrix.arch }} \
                -DCMAKE_SYSTEM_PROCESSOR=${{ matrix.arch }} \
                -DCMAKE_HOST_SYSTEM_PROCESSOR=${{ matrix.arch }} \
                -DCMAKE_OSX_DEPLOYMENT_TARGET=11.0 \
                -DCMAKE_BUILD_TYPE=Release \
                ../VTK-9.2.6
          ninja -j3

      - name: Verify Library Architecture
        run: |
          find . -name "*.dylib" -exec lipo -info {} \;

      - name: Build wheel
        shell: bash -l {0}
        run: |
          cd ./vtk/build
          python -m build -n -w
          cd ../../
          find ./ -iname *.whl

      - name: Test wheel
        shell: bash -l {0}
        run: |
          python -V
          pip install vtk/build/dist/*.whl
          python -c "import vtk;print('vtk imported successfully')"

      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: cadquery-vtk-${{ matrix.os }}-cp${{ matrix.python-version }}
          path: vtk/build/dist/*.whl
